import random  # для 5 задания

print('---')
print('задания 1-2')
print('---')

# 1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
# >>> >>> num_translate("one")
# "один"
# >>> num_translate("eight")
# "восемь"
# Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, необходимую для
# перевода: какой тип данных выбрать, в теле функции или снаружи.
# 2. * (вместо задачи 1) Доработать предыдущую функцию num_translate_adv(): реализовать корректную работу
# с числительными, начинающимися с заглавной буквы. Например:
# >>> >>> num_translate_adv("One")
# "Один"
# >>> num_translate_adv("two")
# "два"

# допустим есть последовательные (без пропусков) перечисления числительных на двух языках, их можно насплитить в листы:
Russian = ['один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять']
English = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
#  Из листов формируем словарь:
num_word = dict(zip(English, Russian))  # логику придумал сам, а
# способ подсмотрел: https://ru.stackoverflow.com/questions/789625/Как-сделать-словарь-из-двух-списков
# Из общих соображений я бы предпочел сразу формировать примерно такую композицию словаря:
#  num_word = {
# 1: [один, one], ... (un, uno, ...)],
# 2: [два, two], ...(deux, due, ...)]
# ...
# n: ... }
# где по вертикали числа, а по горизонтали названия числа в языках: русском, английском (фра/ита/ итд)
# но решение не пришло сразу - не стал углубляться, наверное, пока "этот вопрос не по окладу" ...


def num_translate(num):
    num = num.lower()  # нормализация по регистру введенных слов
    trnslt = num_word.get(num)
    if num_word.get(num) is not None:
        print('Переводом слова:', '"', num, '"', 'на русский язык является слово:', '"', trnslt, '"', )
    else:
        print(num_word.get(num), 'Перевод невозможен!')


num = str(input('Введите число для перевода: '))
num_translate(num)

print('---')
print('задания 3-4')
print('---')

# 3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
# в котором ключи — первые буквы имен, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы.
# Например: >>> >>> thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"],
#     "М": ["Мария"], "П": ["Петр"]
# }
# Подумайте: полезен ли будет вам оператор распаковки? Сможете ли вы вернуть отсортированный по ключам словарь?
#
# 4. * (вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате
# «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные
# по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы. Например:
# >>> >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": "Петр Алексеев"
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"],
#         "А": ["Анна Савельева"]
#     }
# }
# Сможете ли вы вернуть отсортированный по ключам словарь?

staff_names = {}


def thesaurus(names):
    for name in names:
        letter = name[0]  # вычленение начальных букв = ключей
        staff_names.setdefault(letter, []).append(name)  # формирование словаря добавлением новых ключей
    print('Список до сортировки: ', staff_names)


names = ['Иван', 'Петр', 'Мария',  'Илья', 'Анна']
thesaurus(names)

staff_names = dict(sorted(staff_names.items()))  # декомпозиция словаря на пары "клч-знч" с сортировкой и слиянием
print('Сортированный список: ', staff_names)

print('---')
print('задание 5')
print('---')
# 5. Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из двух случайных слов,
# взятых из трёх списков:
# nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
# adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
# adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
#         Например:
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]
# Документировать код функции.
# Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках
# (когда каждое слово можно использовать только в одной шутке)? Сможете ли вы сделать аргументы именованными?

# import random - перенесено в начало файла
flag = int(input('Повторять слова? "0" - не повторять, "1" - повторять: '))
while int(flag) != 0 and int(flag) != 1:
    print('Введите корректное значение: "0" или "1"!')
    flag = int(input('Повторять слова? "0" - не повторять, "1" - повторять: '))


def get_jokes():
    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
    for n in nouns:
        adverbs_r = random.randint(0, len(adverbs) - 1)
        adverbs_j = adverbs[adverbs_r]
        adjectives_r = random.randint(0, len(adjectives) - 1)
        adjectives_j = adjectives[adjectives_r]
        joke = n + ' ' + adverbs_j + ' ' + adjectives_j
        print(joke)
        if int(flag) == 0:
            adverbs.pop(adverbs_r)
            adjectives.pop(adjectives_r)


get_jokes()
